#ifndef REGISTER_H
#define REGISTER_H
#include <search.h>
typedef enum
{
    REGISTER_AL,REGISTER_CL,REGISTER_DL,REGISTER_BL,
    REGISTER_AH,REGISTER_CH,REGISTER_DH,REGISTER_BH,
    REGISTER_BPL,REGISTER_SPL,REGISTER_DIL,REGISTER_SIL,
    REGISTER_R8B,REGISTER_R9B,REGISTER_R10B,REGISTER_R11B,
    REGISTER_R12B,REGISTER_R13B,REGISTER_R14B,REGISTER_R15B,

    REGISTER_AX,REGISTER_CX,REGISTER_DX,REGISTER_BX,
    REGISTER_SP,REGISTER_BP,REGISTER_SI,REGISTER_DI,
    REGISTER_R8,REGISTER_R9,REGISTER_R10,REGISTER_R11,
    REGISTER_R12,REGISTER_R13,REGISTER_R14,REGISTER_R15,

    REGISTER_EAX,REGISTER_ECX,REGISTER_EDX,REGISTER_EBX,
    REGISTER_ESP,REGISTER_EBP,REGISTER_ESI,REGISTER_EDI,
    REGISTER_R8D,REGISTER_R9D,REGISTER_R10D,REGISTER_R11D,
    REGISTER_R12D,REGISTER_R13D,REGISTER_R14D,REGISTER_R15D,

    REGISTER_RAX,REGISTER_RCX,REGISTER_RDX,REGISTER_RBX,
    REGISTER_RSP,REGISTER_RBP,REGISTER_RSI,REGISTER_RDI,
}x86_64_register_t;

typedef struct 
{
    const char* str;
    x86_64_register_t reg;
}register_string_map_t;

x86_64_register_t lex_register(const char* register_string);

void print_register(x86_64_register_t reg);
#endif